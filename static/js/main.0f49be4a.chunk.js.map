{"version":3,"sources":["components/Report.js","components/Input.js","components/ErrorPopup.js","App.js","serviceWorker.js","index.js"],"names":["Report","_ref","zipcode","onDelete","dispatchError","_useState","useState","_useState2","Object","slicedToArray","report","setReport","fetchReport","fetch","concat","then","data","json","cod","message","updatedAt","Date","toLocaleString","console","log","useEffect","react_default","a","createElement","Card_default","style","margin","maxWidth","CardContent_default","className","Fragment","name","main","temp","weather","description","alt","src","icon","width","minHeight","CircularProgress_default","CardActions_default","IconButton_default","aria-label","color","component","disabled","onClick","Refresh_default","Delete_default","SearchForm","props","value","setValue","onSubmit","e","preventDefault","length","TextField_default","fullWidth","label","onChange","isNaN","target","ErrorPopup","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","open","Boolean","onClose","ContentProps","aria-describedby","id","App","reports","setReports","_useState3","_useState4","error","setError","navigator","geolocation","getCurrentPosition","_ref$coords","coords","latitude","longitude","userLocation","zipcodes","lookupByCoords","zip","positionError","toConsumableArray","random","Input","some","map","i","components_Report","key","err","index","updatedReports","slice","components_ErrorPopup","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f49be4a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\n// import CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n// import CardMedia from '@material-ui/core/CardMedia';\n// import Button from '@material-ui/core/Button';\n// import Typography from '@material-ui/core/Typography';\n// import Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport queryString from '../utils/queryString';\n\n\n\n\nconst Report = ({ zipcode, onDelete, dispatchError }) => {\n\n\tconst [report, setReport] = useState(null);\n\n\tuseEffect(() => {\n\t\tfetchReport();\n\t}, []);\n\n\tfunction fetchReport() {\n\n\t\tfetch(`https://ahs-gitpages.herokuapp.com/weather-report/${zipcode}`)\n\t\t\t.then(data => data.json())\n\t\t\t.then(data => {\n\n\t\t\t\tif (data.cod !== 200) {\n\t\t\t\t\tdispatchError(data.message || 'Something went wrong');\n\t\t\t\t\tonDelete();\n\t\t\t\t} else {\n\t\t\t\t\n\t\t\t\t\tdata.updatedAt = new Date().toLocaleString();\n\t\t\t\t\t\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t\tsetReport(data);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t})\n\t\t}\n\n\treturn (\n\t\t<Card style={{margin: 5, maxWidth: 400}}>\t\t\n\t\t\t<CardContent className=\"card-content\">\n\t\t\t\t {/* <h4>{ report.coord.lon} &deg; , { report.coord.lat } &deg;</h4>*/}\n\t\t\t\t{\n\t\t\t\t\treport ?\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<h2> {report.name }</h2>\n\t\t\t\t\t\t<h3>{ zipcode }</h3>  \t\t\t\t\t\n\t\t\t\t\t\t<h1>{ report.main.temp }&deg;F  </h1>\t\n\t\t\t\t\t\t<div className=\"temp-display\">\n\t\t\t\t\t\t\t<b>{ report.weather[0].description } </b>\n\t\t\t\t\t\t\t<img \n\t\t\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t\t\t\tsrc={\"http://openweathermap.org/img/w/\" + report.weather[0].icon + \".png\"}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<small>Last checked: {report.updatedAt} </small>\n\t\t\t\t\t\t</p>\t\t\t\t\t\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t:\n\t\t\t\t\t<div style={{width: '100%', minHeight: 150}}>\n\t\t\t\t\t\t<div style={{width: '50%',margin: '40px auto'}}>\n\t\t\t\t\t\t\t<CircularProgress />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div> \t\t\t\t\t\n\t\t\t\t}\n\t\t\t</CardContent> \n\t\t\t<CardActions>  \n\t\t\t\t<IconButton \n\t\t\t\t\taria-label=\"Refresh\"\n\t\t\t\t\tcolor=\"primary\" \n\t\t\t\t\tcomponent=\"span\"\n\t\t\t\t\tdisabled={!report}\n\t\t\t\t\tonClick={fetchReport}\n\t\t\t\t>\n\t\t\t\t\t<RefreshIcon />\n\t\t\t\t</IconButton>\n\t\t\t\n\t\t\t\t<IconButton \n\t\t\t\t\taria-label=\"Delete\"\n\t\t\t\t\tonClick={onDelete}\n\t\t\t\t>\n\t\t\t\t\t<DeleteIcon />\n\t\t\t\t</IconButton>        \n\t\t\t</CardActions>\n\t\t</Card>\n\t)\n}\n\nexport default Report;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nconst SearchForm = props => {\n\n\tconst [value, setValue] = useState('');\n\n\tconst handleOnChange = e => {\n\t\tif (!isNaN(e.target.value) && e.target.value.length < 6) {\n\t\t\tsetValue(e.target.value)\n\t\t}\n\t}\n\n\tconst handleOnSubmit = e => {\n\t\te.preventDefault();\n\t\tif (value.length === 5) {\n\t\t\tprops.onSubmit(value);\n\t\t\tsetValue('');\n\t\t}\n\t\t\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleOnSubmit}>\n\t\t\t<TextField \n\t\t\t\tfullWidth\n\t\t\t\tlabel=\"Search by zipcode\"\n\t\t\t\tonChange={handleOnChange}\n\t\t\t\tvalue={value}\n\t\t\t/>\n\t\t</form>\n\t)\n}\n\nexport default SearchForm;","import React from 'react';\n//import Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\n// import IconButton from '@material-ui/core/IconButton';\n// import CloseIcon from '@material-ui/icons/Close';\n\nconst ErrorPopup = props => {\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      autoHideDuration={2000}\n      open={Boolean(props.message)}\n      onClose={props.onClose}\n      ContentProps={{\n        'aria-describedby': 'message-id',\n      }}\n      message={<span id=\"message-id\">{props.message}</span>}\n    />\n  );\n}\n\nexport default ErrorPopup;","import React, { useEffect, useState } from 'react';\nimport zipcodes from 'zipcodes';\n\nimport Report from './components/Report';\nimport SearchForm from './components/Input';\nimport ErrorPopup from './components/ErrorPopup';\n\n\nimport './styles/index.css';\n\n\nconst App = props => {\n\n  const [ reports, setReports ] = useState([]);\n  const [ error, setError ] = useState('');\n  \n  useEffect(() => {\n  \t// load in weather report of users current location automatically\n    navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude }}) => {\n      const userLocation = zipcodes.lookupByCoords(latitude, longitude);\n\n      if (userLocation) {\n        console.log({ userLocation });\n        setReports([ userLocation.zip ]);\n      }\n    }, positionError => {\n      console.log('Could not load user\\'s location data, loading random location');\n      setReports([...reports, zipcodes.random().zip ])\n      //setError(positionError.message);\n    })\n  },[]);\n  \n\n  function onSubmit(zipcode) {\n    // only allow unique zipcodes\n    if (reports.some(zip => zip === zipcode)) {\n      return setError(`A weather report for ${zipcode} is already being displayed`);\n    } \n\n    setReports([...reports, zipcode]);\n  }\n\n  function onDelete(index) {\n    const updatedReports = reports.slice(0, index)\n      .concat(reports.slice(index + 1));\n\n    setReports(updatedReports);\n  }\n\n  return (\n    <main>\n      <SearchForm onSubmit={onSubmit}/>\n      <div className=\"report-wrapper\">\n      {\n        reports.map((zipcode, i) => \n          <Report \n            key={zipcode}\n            dispatchError={err => setError(err)}\n            onDelete={() => onDelete(i)}\n            zipcode={zipcode}\n          />\n        )\n      }\n      </div>\n      <ErrorPopup\n        onClose={() => setError('')}\n        message={error}\n      />        \n    </main>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}